<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4f46e5;
            --secondary: #10b981;
            --danger: #ef4444;
            --dark: #1f2937;
            --light: #f3f4f6;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light);
            min-height: 100vh;
        }
        
        .expense-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        
        .chart-bar {
            transition: height 0.5s ease-in-out;
        }
        
        @media (max-width: 640px) {
            .stats-grid {
                grid-template-columns: repeat(1, minmax(0, 1fr));
            }
        }
    </style>
</head>
<body class="min-h-screen pb-20">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <header class="mb-8">
            <h1 class="text-3xl font-bold text-center text-indigo-600 mb-2">Expense Tracker</h1>
            <p class="text-center text-gray-600">Track your spending effortlessly</p>
        </header>
        
        <!-- Summary Cards -->
        <div class="stats-grid grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500">Total Balance</p>
                        <h2 class="text-2xl font-bold" id="total-balance">$0.00</h2>
                    </div>
                    <div class="bg-indigo-100 p-3 rounded-full">
                        <i class="fas fa-wallet text-indigo-600 text-xl"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500">Income</p>
                        <h2 class="text-2xl font-bold text-green-500" id="total-income">$0.00</h2>
                    </div>
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-arrow-up text-green-500 text-xl"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500">Expenses</p>
                        <h2 class="text-2xl font-bold text-red-500" id="total-expense">$0.00</h2>
                    </div>
                    <div class="bg-red-100 p-3 rounded-full">
                        <i class="fas fa-arrow-down text-red-500 text-xl"></i>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Add Expense Form -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4 text-gray-800">Add New Transaction</h2>
            <form id="expense-form" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title</label>
                        <input type="text" id="title" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="e.g. Groceries" required>
                    </div>
                    
                    <div>
                        <label for="amount" class="block text-sm font-medium text-gray-700 mb-1">Amount</label>
                        <input type="number" id="amount" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="e.g. 100" step="0.01" required>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="date" class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                        <input type="date" id="date" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" required>
                    </div>
                    
                    <div>
                        <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                        <select id="category" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="food">Food</option>
                            <option value="transport">Transport</option>
                            <option value="shopping">Shopping</option>
                            <option value="housing">Housing</option>
                            <option value="entertainment">Entertainment</option>
                            <option value="health">Health</option>
                            <option value="education">Education</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                </div>
                
                <div>
                    <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                    <textarea id="description" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" rows="2" placeholder="Additional details..."></textarea>
                </div>
                
                <div class="flex space-x-3">
                    <button type="button" id="expense-btn" class="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-md transition flex items-center justify-center">
                        <i class="fas fa-minus-circle mr-2"></i> Expense
                    </button>
                    <button type="button" id="income-btn" class="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-md transition flex items-center justify-center">
                        <i class="fas fa-plus-circle mr-2"></i> Income
                    </button>
                </div>
            </form>
        </div>
        
        <!-- Expense List -->
        <div class="mb-8">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold text-gray-800">Recent Transactions</h2>
                <div class="flex space-x-2">
                    <button id="filter-all" class="px-3 py-1 bg-indigo-600 text-white rounded-md text-sm">All</button>
                    <button id="filter-income" class="px-3 py-1 bg-gray-200 rounded-md text-sm">Income</button>
                    <button id="filter-expense" class="px-3 py-1 bg-gray-200 rounded-md text-sm">Expense</button>
                </div>
            </div>
            
            <div id="expense-list" class="space-y-3">
                <!-- Expenses will be added here dynamically -->
                <div class="text-center py-8 text-gray-500" id="empty-state">
                    <i class="fas fa-receipt text-4xl mb-3"></i>
                    <p>No transactions yet</p>
                    <p class="text-sm">Add your first transaction above</p>
                </div>
            </div>
        </div>
        
        <!-- Statistics -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4 text-gray-800">Monthly Statistics</h2>
            <div class="flex items-end h-48 mb-4 space-x-2" id="chart-container">
                <!-- Chart bars will be added here dynamically -->
            </div>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="category-stats">
                <!-- Category stats will be added here dynamically -->
            </div>
        </div>
    </div>
    
    <!-- Edit Modal -->
    <div id="edit-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Edit Transaction</h3>
                <button id="close-modal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="edit-form" class="space-y-4">
                <input type="hidden" id="edit-id">
                <div>
                    <label for="edit-title" class="block text-sm font-medium text-gray-700 mb-1">Title</label>
                    <input type="text" id="edit-title" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" required>
                </div>
                
                <div>
                    <label for="edit-amount" class="block text-sm font-medium text-gray-700 mb-1">Amount</label>
                    <input type="number" id="edit-amount" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" step="0.01" required>
                </div>
                
                <div>
                    <label for="edit-date" class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                    <input type="date" id="edit-date" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" required>
                </div>
                
                <div>
                    <label for="edit-category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                    <select id="edit-category" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <option value="food">Food</option>
                        <option value="transport">Transport</option>
                        <option value="shopping">Shopping</option>
                        <option value="housing">Housing</option>
                        <option value="entertainment">Entertainment</option>
                        <option value="health">Health</option>
                        <option value="education">Education</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                
                <div>
                    <label for="edit-description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea id="edit-description" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" rows="2"></textarea>
                </div>
                
                <div class="flex space-x-3">
                    <button type="button" id="edit-expense-btn" class="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-md transition">
                        Update as Expense
                    </button>
                    <button type="button" id="edit-income-btn" class="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-md transition">
                        Update as Income
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        // DOM Elements
        const expenseForm = document.getElementById('expense-form');
        const expenseBtn = document.getElementById('expense-btn');
        const incomeBtn = document.getElementById('income-btn');
        const expenseList = document.getElementById('expense-list');
        const emptyState = document.getElementById('empty-state');
        const totalBalance = document.getElementById('total-balance');
        const totalIncome = document.getElementById('total-income');
        const totalExpense = document.getElementById('total-expense');
        const chartContainer = document.getElementById('chart-container');
        const categoryStats = document.getElementById('category-stats');
        const filterAll = document.getElementById('filter-all');
        const filterIncome = document.getElementById('filter-income');
        const filterExpense = document.getElementById('filter-expense');
        const editModal = document.getElementById('edit-modal');
        const closeModal = document.getElementById('close-modal');
        const editForm = document.getElementById('edit-form');
        const editExpenseBtn = document.getElementById('edit-expense-btn');
        const editIncomeBtn = document.getElementById('edit-income-btn');
        
        // Initialize transactions array
        let transactions = JSON.parse(localStorage.getItem('transactions')) || [];
        
        // Initialize the app
        function init() {
            // Set today's date as default
            document.getElementById('date').valueAsDate = new Date();
            
            // Load transactions
            updateTransactions();
            
            // Event listeners
            expenseBtn.addEventListener('click', addTransaction.bind(null, 'expense'));
            incomeBtn.addEventListener('click', addTransaction.bind(null, 'income'));
            filterAll.addEventListener('click', () => filterTransactions('all'));
            filterIncome.addEventListener('click', () => filterTransactions('income'));
            filterExpense.addEventListener('click', () => filterTransactions('expense'));
            closeModal.addEventListener('click', hideModal);
            editExpenseBtn.addEventListener('click', updateTransaction.bind(null, 'expense'));
            editIncomeBtn.addEventListener('click', updateTransaction.bind(null, 'income'));
        }
        
        // Add a new transaction
        function addTransaction(type, e) {
            e.preventDefault();
            
            const title = document.getElementById('title').value.trim();
            const amount = parseFloat(document.getElementById('amount').value);
            const date = document.getElementById('date').value;
            const category = document.getElementById('category').value;
            const description = document.getElementById('description').value.trim();
            
            if (!title || isNaN(amount)) {
                alert('Please enter valid title and amount');
                return;
            }
            
            const transaction = {
                id: Date.now().toString(),
                title,
                amount,
                type,
                date,
                category,
                description,
                createdAt: new Date().toISOString()
            };
            
            transactions.unshift(transaction);
            saveTransactions();
            updateTransactions();
            
            // Reset form
            expenseForm.reset();
            document.getElementById('date').valueAsDate = new Date();
        }
        
        // Update a transaction
        function updateTransaction(type, e) {
            e.preventDefault();
            
            const id = document.getElementById('edit-id').value;
            const title = document.getElementById('edit-title').value.trim();
            const amount = parseFloat(document.getElementById('edit-amount').value);
            const date = document.getElementById('edit-date').value;
            const category = document.getElementById('edit-category').value;
            const description = document.getElementById('edit-description').value.trim();
            
            if (!title || isNaN(amount)) {
                alert('Please enter valid title and amount');
                return;
            }
            
            const index = transactions.findIndex(t => t.id === id);
            if (index !== -1) {
                transactions[index] = {
                    ...transactions[index],
                    title,
                    amount,
                    type,
                    date,
                    category,
                    description
                };
                
                saveTransactions();
                updateTransactions();
                hideModal();
            }
        }
        
        // Delete a transaction
        function deleteTransaction(id) {
            if (confirm('Are you sure you want to delete this transaction?')) {
                transactions = transactions.filter(t => t.id !== id);
                saveTransactions();
                updateTransactions();
            }
        }
        
        // Edit a transaction (show modal)
        function editTransaction(id) {
            const transaction = transactions.find(t => t.id === id);
            if (transaction) {
                document.getElementById('edit-id').value = transaction.id;
                document.getElementById('edit-title').value = transaction.title;
                document.getElementById('edit-amount').value = transaction.amount;
                document.getElementById('edit-date').value = transaction.date;
                document.getElementById('edit-category').value = transaction.category;
                document.getElementById('edit-description').value = transaction.description || '';
                
                if (transaction.type === 'expense') {
                    editExpenseBtn.classList.add('bg-red-600');
                    editIncomeBtn.classList.remove('bg-green-600');
                } else {
                    editIncomeBtn.classList.add('bg-green-600');
                    editExpenseBtn.classList.remove('bg-red-600');
                }
                
                showModal();
            }
        }
        
        // Show modal
        function showModal() {
            editModal.classList.remove('hidden');
        }
        
        // Hide modal
        function hideModal() {
            editModal.classList.add('hidden');
        }
        
        // Filter transactions
        function filterTransactions(type) {
            // Reset all buttons
            filterAll.classList.remove('bg-indigo-600', 'text-white');
            filterIncome.classList.remove('bg-indigo-600', 'text-white');
            filterExpense.classList.remove('bg-indigo-600', 'text-white');
            
            // Style active button
            if (type === 'all') {
                filterAll.classList.add('bg-indigo-600', 'text-white');
                filterIncome.classList.add('bg-gray-200');
                filterExpense.classList.add('bg-gray-200');
            } else if (type === 'income') {
                filterIncome.classList.add('bg-indigo-600', 'text-white');
                filterAll.classList.add('bg-gray-200');
                filterExpense.classList.add('bg-gray-200');
            } else {
                filterExpense.classList.add('bg-indigo-600', 'text-white');
                filterAll.classList.add('bg-gray-200');
                filterIncome.classList.add('bg-gray-200');
            }
            
            updateTransactions(type);
        }
        
        // Save transactions to localStorage
        function saveTransactions() {
            localStorage.setItem('transactions', JSON.stringify(transactions));
        }
        
        // Update transactions in the UI
        function updateTransactions(filter = 'all') {
            // Filter transactions if needed
            let filteredTransactions = [...transactions];
            if (filter === 'income') {
                filteredTransactions = transactions.filter(t => t.type === 'income');
            } else if (filter === 'expense') {
                filteredTransactions = transactions.filter(t => t.type === 'expense');
            }
            
            // Clear the list
            expenseList.innerHTML = '';
            
            // Show empty state if no transactions
            if (filteredTransactions.length === 0) {
                expenseList.appendChild(emptyState);
                emptyState.classList.remove('hidden');
            } else {
                emptyState.classList.add('hidden');
                
                // Add each transaction to the list
                filteredTransactions.forEach(transaction => {
                    const transactionEl = document.createElement('div');
                    transactionEl.className = 'expense-card bg-white rounded-lg shadow p-4 transition cursor-pointer';
                    
                    const iconClass = transaction.type === 'income' ? 'text-green-500' : 'text-red-500';
                    const amountClass = transaction.type === 'income' ? 'text-green-500' : 'text-red-500';
                    const sign = transaction.type === 'income' ? '+' : '-';
                    
                    const categoryIcons = {
                        food: 'fa-utensils',
                        transport: 'fa-car',
                        shopping: 'fa-shopping-bag',
                        housing: 'fa-home',
                        entertainment: 'fa-film',
                        health: 'fa-heartbeat',
                        education: 'fa-graduation-cap',
                        other: 'fa-receipt'
                    };
                    
                    transactionEl.innerHTML = `
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="bg-gray-100 p-3 rounded-full">
                                    <i class="fas ${categoryIcons[transaction.category]} ${iconClass}"></i>
                                </div>
                                <div>
                                    <h3 class="font-medium text-gray-800">${transaction.title}</h3>
                                    <p class="text-sm text-gray-500">${new Date(transaction.date).toLocaleDateString()} • ${transaction.category.charAt(0).toUpperCase() + transaction.category.slice(1)}</p>
                                </div>
                            </div>
                            <div class="text-right">
                                <p class="font-semibold ${amountClass}">${sign}$${transaction.amount.toFixed(2)}</p>
                                <div class="flex space-x-2 mt-1 justify-end">
                                    <button class="edit-btn text-indigo-500 hover:text-indigo-700" data-id="${transaction.id}">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="delete-btn text-red-500 hover:text-red-700" data-id="${transaction.id}">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    expenseList.appendChild(transactionEl);
                });
                
                // Add event listeners to edit and delete buttons
                document.querySelectorAll('.edit-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        editTransaction(btn.dataset.id);
                    });
                });
                
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        deleteTransaction(btn.dataset.id);
                    });
                });
            }
            
            // Update summary
            updateSummary();
            
            // Update charts
            updateCharts();
        }
        
        // Update summary cards
        function updateSummary() {
            const incomes = transactions
                .filter(t => t.type === 'income')
                .reduce((sum, t) => sum + t.amount, 0);
            
            const expenses = transactions
                .filter(t => t.type === 'expense')
                .reduce((sum, t) => sum + t.amount, 0);
            
            const balance = incomes - expenses;
            
            totalIncome.textContent = `$${incomes.toFixed(2)}`;
            totalExpense.textContent = `$${expenses.toFixed(2)}`;
            totalBalance.textContent = `$${balance.toFixed(2)}`;
            
            // Change balance color based on value
            if (balance > 0) {
                totalBalance.classList.remove('text-red-500');
                totalBalance.classList.add('text-green-500');
            } else if (balance < 0) {
                totalBalance.classList.remove('text-green-500');
                totalBalance.classList.add('text-red-500');
            } else {
                totalBalance.classList.remove('text-green-500', 'text-red-500');
            }
        }
        
        // Update charts
        function updateCharts() {
            // Monthly chart
            updateMonthlyChart();
            
            // Category stats
            updateCategoryStats();
        }
        
        // Update monthly chart
        function updateMonthlyChart() {
            // Clear previous chart
            chartContainer.innerHTML = '';
            
            // Group transactions by month
            const now = new Date();
            const currentMonth = now.getMonth();
            const currentYear = now.getFullYear();
            
            const months = [];
            for (let i = 5; i >= 0; i--) {
                const date = new Date(currentYear, currentMonth - i, 1);
                months.push({
                    name: date.toLocaleString('default', { month: 'short' }),
                    year: date.getFullYear(),
                    month: date.getMonth(),
                    total: 0
                });
            }
            
            // Calculate totals for each month
            transactions.forEach(t => {
                const date = new Date(t.date);
                const month = date.getMonth();
                const year = date.getFullYear();
                
                const monthData = months.find(m => 
                    m.month === month && m.year === year
                );
                
                if (monthData) {
                    if (t.type === 'expense') {
                        monthData.total += t.amount;
                    }
                }
            });
            
            // Find max value for scaling
            const maxValue = Math.max(...months.map(m => m.total), 1);
            
            // Create bars
            months.forEach(month => {
                const barHeight = (month.total / maxValue) * 100;
                
                const barContainer = document.createElement('div');
                barContainer.className = 'flex flex-col items-center flex-1';
                
                const bar = document.createElement('div');
                bar.className = 'chart-bar bg-indigo-500 w-8 rounded-t-md';
                bar.style.height = `${barHeight}%`;
                
                const label = document.createElement('span');
                label.className = 'text-xs text-gray-500 mt-1';
                label.textContent = month.name;
                
                const amount = document.createElement('span');
                amount.className = 'text-xs font-medium mt-1';
                amount.textContent = `$${month.total.toFixed(0)}`;
                
                barContainer.appendChild(bar);
                barContainer.appendChild(amount);
                barContainer.appendChild(label);
                chartContainer.appendChild(barContainer);
            });
        }
        
        // Update category stats
        function updateCategoryStats() {
            // Clear previous stats
            categoryStats.innerHTML = '';
            
            // Group expenses by category
            const categories = {
                food: { name: 'Food', total: 0, icon: 'fa-utensils', color: 'bg-blue-100', text: 'text-blue-600' },
                transport: { name: 'Transport', total: 0, icon: 'fa-car', color: 'bg-green-100', text: 'text-green-600' },
                shopping: { name: 'Shopping', total: 0, icon: 'fa-shopping-bag', color: 'bg-purple-100', text: 'text-purple-600' },
                housing: { name: 'Housing', total: 0, icon: 'fa-home', color: 'bg-yellow-100', text: 'text-yellow-600' },
                entertainment: { name: 'Entertainment', total: 0, icon: 'fa-film', color: 'bg-pink-100', text: 'text-pink-600' },
                health: { name: 'Health', total: 0, icon: 'fa-heartbeat', color: 'bg-red-100', text: 'text-red-600' },
                education: { name: 'Education', total: 0, icon: 'fa-graduation-cap', color: 'bg-indigo-100', text: 'text-indigo-600' },
                other: { name: 'Other', total: 0, icon: 'fa-receipt', color: 'bg-gray-100', text: 'text-gray-600' }
            };
            
            // Calculate totals
            transactions.forEach(t => {
                if (t.type === 'expense' && categories[t.category]) {
                    categories[t.category].total += t.amount;
                }
            });
            
            // Create stats cards
            Object.values(categories).forEach(cat => {
                if (cat.total > 0) {
                    const card = document.createElement('div');
                    card.className = 'flex items-center space-x-3 p-3 rounded-lg';
                    card.innerHTML = `
                        <div class="${cat.color} p-3 rounded-full">
                            <i class="fas ${cat.icon} ${cat.text}"></i>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">${cat.name}</p>
                            <p class="font-semibold">$${cat.total.toFixed(2)}</p>
                        </div>
                    `;
                    categoryStats.appendChild(card);
                }
            });
            
            // If no expenses, show message
            if (categoryStats.children.length === 0) {
                categoryStats.innerHTML = `
                    <div class="col-span-4 text-center py-4 text-gray-500">
                        <i class="fas fa-chart-pie text-2xl mb-2"></i>
                        <p>No expense data available</p>
                    </div>
                `;
            }
        }
        
        // Initialize the app
        init();
    </script>
</body>
</html>


